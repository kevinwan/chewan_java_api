<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.gongpingjia.carplay.po.ActivityMember">
	<resultMap id="BaseResultMap" type="com.gongpingjia.carplay.po.ActivityMember">
		<id column="userId" property="userid" jdbcType="VARCHAR" />
		<id column="activityId" property="activityid" jdbcType="VARCHAR" />
		<result column="joinTime" property="jointime" jdbcType="BIGINT" />
	</resultMap>

	<select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="com.gongpingjia.carplay.po.ActivityMemberKey">
		select
		userId, activityId, joinTime
		from activity_member
		where userId = #{userid,jdbcType=VARCHAR}
		and activityId = #{activityid,jdbcType=VARCHAR}
	</select>

	<select id="selectByActivity" resultType="java.util.LinkedHashMap" parameterType="java.util.Map">
		select user.id as userId,
		user.nickname, concat(#{AssetUrl,jdbcType=VARCHAR}, user.photo) as photo from
		activity_member, user where
		activity_member.activityId=#{activityId,jdbcType=VARCHAR} and
		activity_member.userId = user.id
	</select>
	
	<select id="selectByUserId" resultType="java.util.LinkedHashMap" parameterType="java.util.Map">
		select member.activityId, publishTime, start, introduction, location, type, pay, organizer, nickname, gender, 
         age, photo, ifnull(concat(#{gpjIMGUrl,jdbcType=VARCHAR} , car.carBrandLogo),"") as carBrandLogo, ifnull(car.carModel, '') 
         as carModel, drivingExperience, resA.count as totalSeat, resB.count as holdingSeat from activity_member member left join 
         (select id as activityId, organizer, createTime as publishTime, start, ifnull(description, '') as introduction, location, 
         type, paymentType as pay from activity) act on member.activityId = act.activityId left join (select activityId, count(*) 
         as count from seat_reservation group by activityId) resA on act.activityId = resA.activityId left join(select activityId, 
         count(*) as count from seat_reservation where userId is not null group by activityId) resB on act.activityId = resB.activityId 
         left join (select user.id as userId, nickname, gender, (year(sysdate()) - birthYear) as age, concat(#{AssetUrl,jdbcType=VARCHAR}, photo) 
         as photo, ifnull((year(sysdate()) - drivingLicenseYear), 0) as drivingExperience from user) usr on act.organizer = usr.userId 
         left join (select ifnull(brandLogo, '') as carBrandLogo, ifnull(model, '') as carModel, userId from car) car on car.userId = usr.userId 
         where member.userId = #{userId,jdbcType=VARCHAR}   order by publishTime desc limit #{ignore,jdbcType=INTEGER}, #{limit,jdbcType=INTEGER}	
	</select>

	<delete id="deleteByPrimaryKey" parameterType="com.gongpingjia.carplay.po.ActivityMemberKey">
		delete from activity_member
		where userId = #{userid,jdbcType=VARCHAR}
		and activityId = #{activityid,jdbcType=VARCHAR}
	</delete>
	
	<delete id="deleteByParam" parameterType="com.gongpingjia.carplay.po.ActivityMemberKey">
		delete from activity_member
		where
		<where>
			<if test="userId != null">
				and userId = #{userid,jdbcType=VARCHAR}
			</if>
			<if test="activityId != null">
				and activityId = #{activityid,jdbcType=VARCHAR}
			</if>
		</where> 
	</delete>

	<insert id="insert" parameterType="com.gongpingjia.carplay.po.ActivityMember">
		insert into activity_member (userId, activityId, joinTime
		)
		values (#{userid,jdbcType=VARCHAR}, #{activityid,jdbcType=VARCHAR}, #{jointime,jdbcType=BIGINT}
		)
	</insert>

	<update id="updateByPrimaryKey" parameterType="com.gongpingjia.carplay.po.ActivityMember">
		update activity_member
		set joinTime = #{jointime,jdbcType=BIGINT}
		where userId = #{userid,jdbcType=VARCHAR}
		and activityId = #{activityid,jdbcType=VARCHAR}
	</update>
</mapper>