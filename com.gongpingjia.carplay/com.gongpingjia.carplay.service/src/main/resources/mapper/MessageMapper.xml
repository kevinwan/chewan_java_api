<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.gongpingjia.carplay.po.Message">
	<resultMap id="BaseResultMap" type="com.gongpingjia.carplay.po.Message">
		<id column="id" property="id" jdbcType="VARCHAR" />
		<result column="fromUser" property="fromuser" jdbcType="VARCHAR" />
		<result column="toUser" property="touser" jdbcType="VARCHAR" />
		<result column="type" property="type" jdbcType="VARCHAR" />
		<result column="content" property="content" jdbcType="VARCHAR" />
		<result column="extra1" property="extra1" jdbcType="VARCHAR" />
		<result column="extra2" property="extra2" jdbcType="INTEGER" />
		<result column="extra3" property="extra3" jdbcType="VARCHAR" />
		<result column="remarks" property="remarks" jdbcType="VARCHAR" />
		<result column="isChecked" property="ischecked" jdbcType="TINYINT" />
		<result column="isDeleted" property="isdeleted" jdbcType="TINYINT" />
		<result column="createTime" property="createtime" jdbcType="BIGINT" />
	</resultMap>


	<select id="selectByPrimaryKey" resultMap="BaseResultMap"
		parameterType="java.lang.String">
		select
		id, fromUser, toUser, type, content, extra1,
		extra2, extra3, remarks, isChecked,
		isDeleted, createTime
		from message
		where id = #{id,jdbcType=VARCHAR}
	</select>

	<select id="selectCountByUserAndTypeComment" resultType="java.util.Map"
		parameterType="java.util.Map">
		select count(*) as count from message where toUser =
		#{userId,jdbcType=VARCHAR} and isChecked = 0
		and type = #{type,jdbcType=VARCHAR}
	</select>

	<select id="selectCountByUserAndTypeNotComment" resultType="java.util.Map"
		parameterType="java.util.Map">
		select count(*) as count from message where toUser =
		#{userId,jdbcType=VARCHAR} and isChecked = 0
		and type is not null and type not like #{type,jdbcType=VARCHAR}
	</select>

	<select id="selectContentByUserAndTypeComment" resultType="java.util.Map"
		parameterType="java.util.Map">
		select ifnull(content, "") as Content from message where
		toUser = #{userId,jdbcType=VARCHAR}
		and isChecked = 0 and type = #{type,jdbcType=VARCHAR} order by createTime
		desc limit 1
	</select>

	<select id="selectContentByUserAndTypeNotComment" resultType="java.util.Map"
		parameterType="java.util.Map">
		select ifnull(content, "") as Content
		from message
		where toUser = #{userId,jdbcType=VARCHAR}
		and isChecked = 0 and type is not null
		and type not like #{type,jdbcType=VARCHAR}
		order by createTime desc limit 1
	</select>

	<select id="selectMessageListByUserAndTypeComment" resultType="java.util.Map" parameterType="java.util.Map">
		select id as messageId, ifnull(extra1, "") as activityId, type, fromUser as userId, photo, nickname, age, gender, 
	    ifnull(concat(#{brandImgUrl,jdbcType=VARCHAR} , car.carBrandLogo), "") as carBrandLogo, ifnull(car.carModel, "") as carModel, drivingExperience, 
	    content, ifnull(extra2, 0) as seat, ifnull(extra3, "") as applicationId, createTime, ifnull(remarks, "") as remarks 
	    from message left join (select user.id as userId, nickname, (year(sysdate()) - birthYear) as age, 
	    concat(#{assetImgUrl,jdbcType=VARCHAR}, photo, "?imageView2/1/w/200") 
	    as photo, ifnull((year(sysdate()) - drivingLicenseYear), 0) as drivingExperience, gender from user) usr on usr.userId = message.fromUser 
	    left join (select ifnull(brandLogo, "") as carBrandLogo, ifnull(model, "") as carModel, userId from car) car on car.userId = usr.userId 
	    where message.toUser = #{userId,jdbcType=VARCHAR} and message.type = #{type,jdbcType=VARCHAR} and message.isDeleted = 0 order by 
	    message.createTime desc limit #{ignore,jdbcType=INTEGER}, #{limit,jdbcType=INTEGER}
	</select>
	
	<select id="selectMessageListByUserAndTypeNotComment" resultType="java.util.Map" parameterType="java.util.Map">
		select id as messageId, ifnull(extra1, "") as activityId, type, fromUser as userId, photo, nickname, age, gender, 
	    ifnull(concat(#{brandImgUrl,jdbcType=VARCHAR} , car.carBrandLogo), "") as carBrandLogo, ifnull(car.carModel, "") as carModel, drivingExperience, 
	    content, ifnull(extra2, 0) as seat, ifnull(extra3, "") as applicationId, createTime, ifnull(remarks, "") as remarks 
	    from message left join (select user.id as userId, nickname, (year(sysdate()) - birthYear) as age, 
	    concat(#{assetImgUrl,jdbcType=VARCHAR}, photo, "?imageView2/1/w/200") 
	    as photo, ifnull((year(sysdate()) - drivingLicenseYear), 0) as drivingExperience, gender from user) usr on usr.userId = message.fromUser 
	    left join (select ifnull(brandLogo, "") as carBrandLogo, ifnull(model, "") as carModel, userId from car) car on car.userId = usr.userId 
	    where message.toUser = #{userId,jdbcType=VARCHAR} and message.type is not null and message.type not like   #{type,jdbcType=VARCHAR} and message.isDeleted = 0 order by 
	    message.createTime desc limit #{ignore,jdbcType=INTEGER}, #{limit,jdbcType=INTEGER}
	</select>
	
	<delete id="deleteByPrimaryKey" parameterType="java.lang.String">
		delete from
		message
		where id = #{id,jdbcType=VARCHAR}
	</delete>

	<insert id="insert" parameterType="com.gongpingjia.carplay.po.Message">
		insert into message (id,
		fromUser, toUser,
		type, content, extra1,
		extra2, extra3, remarks,
		isChecked, isDeleted, createTime
		)
		values (#{id,jdbcType=VARCHAR},
		#{fromuser,jdbcType=VARCHAR}, #{touser,jdbcType=VARCHAR},
		#{type,jdbcType=VARCHAR}, #{content,jdbcType=VARCHAR},
		#{extra1,jdbcType=VARCHAR},
		#{extra2,jdbcType=INTEGER},
		#{extra3,jdbcType=VARCHAR}, #{remarks,jdbcType=VARCHAR},
		#{ischecked,jdbcType=TINYINT}, #{isdeleted,jdbcType=TINYINT},
		#{createtime,jdbcType=BIGINT}
		)
	</insert>

	<update id="updateByPrimaryKey" parameterType="com.gongpingjia.carplay.po.Message">
		update message
		set
		fromUser = #{fromuser,jdbcType=VARCHAR},
		toUser =
		#{touser,jdbcType=VARCHAR},
		type = #{type,jdbcType=VARCHAR},
		content =
		#{content,jdbcType=VARCHAR},
		extra1 = #{extra1,jdbcType=VARCHAR},
		extra2 = #{extra2,jdbcType=INTEGER},
		extra3 =
		#{extra3,jdbcType=VARCHAR},
		remarks = #{remarks,jdbcType=VARCHAR},
		isChecked = #{ischecked,jdbcType=TINYINT},
		isDeleted =
		#{isdeleted,jdbcType=TINYINT},
		createTime =
		#{createtime,jdbcType=BIGINT}
		where id = #{id,jdbcType=VARCHAR}
	</update>
	
	<update id="updateIsCheckedByUserAndTypeComment" parameterType="java.util.Map">
		update message set isChecked=1 where toUser=#{userId,jdbcType=VARCHAR} and type=#{type,jdbcType=VARCHAR}
	</update>
	
	<update id="updateIsCheckedByUserAndTypeNotComment" parameterType="java.util.Map">
		update message set isChecked=1 where toUser=#{userId,jdbcType=VARCHAR} and type is not null and type not like #{type,jdbcType=VARCHAR}
	</update>
</mapper>